#!/bin/bash
# 
# This file is part of Darling.
# 
# Copyright (C) 2015 Lubos Dolezel
# 
# Darling is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Darling is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Darling.  If not, see <http://www.gnu.org/licenses/>.
# 

export PATH="/bin:/sbin:/usr/bin:/usr/local/bin"

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
DARLING_PREFIX=$(realpath "$SCRIPTPATH/..")

selfmtime=$(stat -c %Y "$DARLING_PREFIX/bin/darling")

check_prefix() {

    if [ ! -d "$DPREFIX" -o ! -f "$DPREFIX/.update-timestamp" ]; then
        setup_prefix "$DPREFIX"
    else

        updatets=$(cat $DPREFIX/.update-timestamp)
		case $updatets in
			disable*)
				;;
			''|*[!0-9]*)
				setup_prefix "$DPREFIX"
				;;
			*)
				[ $updatets -lt $selfmtime ] && setup_prefix "$DPREFIX"
				;;
		esac

		return 0
    fi
}

setup_prefix() {
    prefix_pkg="/tmp/prefix.$$.pkg"

    >&2 echo "Setting up prefix at $1"
    >&2 echo

    mkdir -p "$1"
    rm -f "$1/darling-prefix"

    rm -f "$1/system-root"
    ln -s / "$1/system-root"

    rm -f "$1/darling-prefix"
    ln -s "system-root${DARLING_PREFIX}" "$1/darling-prefix"

    rm -f "$1/dev"
    ln -sf "system-root/dev" "$1/dev"

    rm -rf "$1/sandboxed-home"

    rm -f "$1/home"
    if [ "${DARLING_SANDBOXED_HOME}" != "1" ]; then
        >&2 echo "Setting sandboxed home"
        mkdir "$1/sandboxed-home"
        ln -sf "sandboxed-home" "$1/home"
        for USERDIR in $(ls "$1/system-root/home/"); do
            mkdir "$1/sandboxed-home/$USERDIR"
        done
    else
        ln -sf "system-root/home" "$1/home"
    fi

    rm -f "$1/Users"
    ln -sf "home" "$1/Users"

    rm -f "$1/tmp"
    ln -sf "system-root/tmp" "$1/tmp"

    rm -f "$1/etc" 2>/dev/null || true
    mkdir -p "$1/etc"
    ln -sf "../system-root/etc/timezone" "$1/etc/timezone"
    ln -sf "../system-root/etc/resolv.conf" "$1/etc/resolv.conf"
    ln -sf "../system-root/etc/passwd" "$1/etc/passwd"
    ln -sf "../system-root/etc/group" "$1/etc/group"
    ln -sf "../system-root/etc/hosts" "$1/etc/hosts"
    ln -sf "../system-root/etc/localtime" "$1/etc/localtime" || true

    mkdir -p "$1/usr/share"
	rm -f "$1/usr/share/zoneinfo" 2>/dev/null || true
    ln -sf "../../system-root/usr/share/zoneinfo" "$1/usr/share/zoneinfo"

    mkdir -p "$1/Volumes" "$1/Applications" "$1/var/root" || true
    mkdir -p "$1/var/run" || true
    ln -sf "../../system-root/dev/log" "$1/var/run/syslog" || true

    # Clean up old cruft (symlinks)
    rm -f "$1/bin" "$1/usr/bin" "$1/etc" "$1/System/Library/Frameworks" "$1/System/Library/PrivateFrameworks" 2>/dev/null || true
    cp -rf "${DARLING_PREFIX}/libexec/darling/"* "$1"
    echo -n "$selfmtime" > "$1/.update-timestamp"

    install_pkg "org.darlinghq.pkg.OpenSSLCertificates"

    >&2 echo "Building manpage database..."
    "${dexec_path}" "${DPREFIX}/bin/bash" -c "/usr/libexec/makewhatis"

    >&2 echo "Prefix is ready."
}

install_pkg() {
    temp="/tmp/pkgs.$$"
    mkdir "$temp" || true

    >&2 echo "Getting latest version of $1..."
    version=$(wget "http://packages.darlinghq.org/${1}/latest.txt" -O- 2>/dev/null)
    pkgpath="$temp/${1}-${version}.pkg"

    >&2 echo "Downloading $1 (version $version)..."
    wget "http://packages.darlinghq.org/${1}/${1}-${version}.pkg" -O "$pkgpath" 2>/dev/null

    "${DARLING_PREFIX}/libexec/darling/usr/bin/installer" -pkg "/system-root${pkgpath}" -target /

    rm -rf "$temp"
}

is_sudo_allowed() {
    if type -p sudo &> /dev/null; then
        sudo -nl "$@" &> /dev/null && return 0
    fi
    return 1
}

launch_with_su() {
    if [ "$(id -u)" = 0 ]; then
        "$@"
    elif is_sudo_allowed; then
        sudo "$@"
    else
        local cmd=$(printf '%q ' "$@")
        su --shell=$BASH --command "$cmd"
    fi
}

darling_check() {
    # Returning values:
    # 0: module is loaded, file permissions are good
    # 1: module is loaded, file permissions are wrong
    # 2: module is not loaded
    grep -q darling_mach "/proc/modules"
    if [ $? -eq 0 ]; then
        [ -r "/dev/mach" -a -w "/dev/mach" ] && return 0 || return 1
    else
        return 2
    fi
}

darling_load() {
    if $(darling_check); then
        >&2 echo "Module is already loaded."
    else
        >&2 echo -n "Loading module... "
        launch_with_su modprobe darling-mach && >&2 echo "Done." || >&2 echo "Fail."
        sleep 1 # Wait for module loading
        launch_with_su chmod a+rw "/dev/mach"
    fi

}

darling_unload() {
    if $(darling_check); then
        >&2 echo -n "Unloading module... "
        launch_with_su rmmod darling-mach && >&2 echo "Done." || >&2 echo "Fail."
    else
        >&2 echo "Module is not loaded, so it can't be unloaded."
    fi
}

darling_clean_home() {
    if $(darling_check); then
        rm "$DPREFIX/.update-timestamp" 2>&1 > /dev/null || true
    fi
}

if [ $# -eq 0 ]; then
    >&2 echo "This is Darling, a runtime environment for OS X applications."
    >&2 echo
    >&2 echo "Copyright (C) 2012-2015 Lubos Dolezel"
    >&2 echo "Includes software components which are Copyright (C) Apple Computer, Inc. and many others."
    >&2 echo
    >&2 echo -e "Usage:\tdarling PROGRAM [ARGUMENTS...]\tRun the specified program" 
    >&2 echo -e "\tdarling shell\t\t\tStart bash shell in prefix"
    #>&2 echo -e "\tdarling hdiutil\t\t\tMount DMG disk images"
    #>&2 echo -e "\tdarling pkgutil\t\t\tInstall PKG packages"
    >&2 echo -e "\tdarling load\t\t\tLoad kernel module"
    >&2 echo -e "\tdarling unload\t\t\tUnload kernel module"
    >&2 echo -e "\tdarling clean-home\t\t\tMarks darling home directory to rebuilt"
    >&2 echo
    >&2 echo "Export DARLING_SANDBOXED_HOME=1 to have sandboxed /home in Darling root"
    >&2 echo
    >&2 echo "The prefix is specified by the DPREFIX environment variable."
    >&2 echo "The default DPREFIX is \$HOME/.darling"
    exit 1
fi

set -e

if [ -z "$DPREFIX" ]; then
    export DPREFIX="$HOME/.darling"
fi

if ! $(darling_check) && [ "$1" != "load" ] && [ "$1" != "unload" ]; then
    2>&1 echo "Cannot open /dev/mach, running 'darling load'."
    darling_load
fi

dexec_path="${0%darling}dyld"
#dexec_path="${DARLING_PREFIX}/bin/darling-exec"

case "$1" in
"shell")
    check_prefix

    if [ $# -gt 1 ]; then
        exec "${dexec_path}" "${DPREFIX}/bin/bash" -c "${*:2}"
    else
        exec "${dexec_path}" "${DPREFIX}/bin/bash"
    fi
    ;;
#"hdiutil")
#    exec "${DPREFIX}/usr/bin/hdiutil" "${@:2}"
#    exit $?
#    ;;
#"pkgutil")
#    >2& echo "Not implemented yet"
#    exit 1
#    ;;
"load")
    darling_load
    ;;
"unload")
    darling_unload
    ;;
"clean-home")
    darling_clean_home
    ;;
*)
    check_prefix
    exec "${dexec_path}" "$1" "${@:2}"
    ;;
esac
