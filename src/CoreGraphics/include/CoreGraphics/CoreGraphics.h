/*
 This file is part of Darling.

 Copyright (C) 2019 Lubos Dolezel

 Darling is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Darling is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Darling.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef _CoreGraphics_H_
#define _CoreGraphics_H_

#import <Foundation/Foundation.h>

#import <CoreGraphics/CGVirtualDisplayMode.h>
#import <CoreGraphics/CGVirtualDisplayDescriptor.h>
#import <CoreGraphics/CGVirtualDisplaySettings.h>
#import <CoreGraphics/CGVirtualDisplay.h>

void* CFTypeCreateWithCGPDFObject(void);
void* CGAccessSessionCreate(void);
void* CGAccessSessionGetBytePointer(void);
void* CGAccessSessionGetBytes(void);
void* CGAccessSessionGetChunks(void);
void* CGAccessSessionRelease(void);
void* CGAccessSessionRewind(void);
void* CGAccessSessionSkipBytes(void);
void* CGAccessSessionSkipForward(void);
void* CGAffineTransformConcat(void);
void* CGAffineTransformEqualToTransform(void);
void* CGAffineTransformInvert(void);
void* CGAffineTransformIsIdentity(void);
void* CGAffineTransformIsRectilinear(void);
void* CGAffineTransformIsSingular(void);
void* CGAffineTransformMake(void);
void* CGAffineTransformMakeRotation(void);
void* CGAffineTransformMakeScale(void);
void* CGAffineTransformMakeTranslation(void);
void* CGAffineTransformMakeWithRect(void);
void* CGAffineTransformRotate(void);
void* CGAffineTransformScale(void);
void* CGAffineTransformTranslate(void);
void* CGApplicationPropertyGetBoolean(void);
void* CGBitmapAllocateData(void);
void* CGBitmapContextCopyData(void);
void* CGBitmapContextCreate(void);
void* CGBitmapContextCreateImage(void);
void* CGBitmapContextCreateWithAlpha(void);
void* CGBitmapContextCreateWithCallbacks(void);
void* CGBitmapContextCreateWithData(void);
void* CGBitmapContextCreateWithDictionary(void);
void* CGBitmapContextCreateWithPlanarAlpha(void);
void* CGBitmapContextDelegateCreateWithDictionary(void);
void* CGBitmapContextGetAlphaBytesPerRow(void);
void* CGBitmapContextGetAlphaData(void);
void* CGBitmapContextGetAlphaInfo(void);
void* CGBitmapContextGetBitmapInfo(void);
void* CGBitmapContextGetBitsPerComponent(void);
void* CGBitmapContextGetBitsPerPixel(void);
void* CGBitmapContextGetBytesPerRow(void);
void* CGBitmapContextGetColorSpace(void);
void* CGBitmapContextGetData(void);
void* CGBitmapContextGetHeight(void);
void* CGBitmapContextGetWidth(void);
void* CGBitmapContextSetData(void);
void* CGBitmapContextWriteImageToFile(void);
void* CGBitmapFreeData(void);
void* CGBitmapGetAlignedBytesPerRow(void);
void* CGBitmapGetFastestAlignment(void);
void* CGBlt_copyBytes(void);
void* CGBlt_depth(void);
void* CGBlt_fillBytes(void);
void* CGBlt_initialize(void);
void* CGBlt_release_pattern(void);
void* CGBufferLockBytePtr(void);
void* CGBufferProviderCreate(void);
void* CGBufferProviderCreateWithCFData(void);
void* CGBufferProviderGetSize(void);
void* CGBufferProviderGetTypeID(void);
void* CGBufferUnlockBytePtr(void);
void* CGCFArrayAppendCGFloat(void);
void* CGCFArrayAppendInteger(void);
void* CGCFArrayAppendRect(void);
void* CGCFArrayApplyBlock(void);
void* CGCFArrayCreate(void);
void* CGCFArrayGetLastValue(void);
void* CGCFArrayGetRectAtIndex(void);
void* CGCFDictionaryApplyBlock(void);
void* CGCFDictionaryCopyKeys(void);
void* CGCFDictionaryCopyValues(void);
void* CGCFDictionaryCreate(void);
void* CGCFDictionaryCreateCopy(void);
void* CGCFDictionaryGetBoolean(void);
void* CGCFDictionaryGetBooleanWithDefault(void);
void* CGCFDictionaryGetCFTypeRef(void);
void* CGCFDictionaryGetFloat(void);
void* CGCFDictionaryGetFloatWithDefault(void);
void* CGCFDictionaryGetInteger(void);
void* CGCFDictionaryGetIntegerWithDefault(void);
void* CGCFDictionaryGetNumber(void);
void* CGCFDictionaryGetPoint(void);
void* CGCFDictionaryGetRect(void);
void* CGCFDictionaryGetSize(void);
void* CGCFDictionarySetBoolean(void);
void* CGCFDictionarySetCFTypeRef(void);
void* CGCFDictionarySetCString(void);
void* CGCFDictionarySetFloat(void);
void* CGCFDictionarySetInteger(void);
void* CGCFDictionarySetNumber(void);
void* CGCFDictionarySetPoint(void);
void* CGCFDictionarySetRect(void);
void* CGCFDictionarySetSize(void);
void* CGCFRelease(void);
void* CGCFRetain(void);
void* CGCFURLCopyFileData(void);
void* CGCMSUtilsCreatePlatformRefFromData(void);
void* CGCMSUtilsGetICCProfileData(void);
void* CGCMSUtilsGetICCProfileDescription(void);
void* CGCMSUtilsGetProcessColorModel(void);
void* CGCMSUtilsReleasePlatformRef(void);
void* CGClipCreateClipPath(void);
void* CGClipGetFlatness(void);
void* CGClipGetIdentifier(void);
void* CGClipGetMask(void);
void* CGClipGetMode(void);
void* CGClipGetPath(void);
void* CGClipGetRect(void);
void* CGClipGetShouldAntialias(void);
void* CGClipGetStroke(void);
void* CGClipGetTextClipping(void);
void* CGClipGetType(void);
void* CGClipGlyphsCreate(void);
void* CGClipGlyphsCreateCopy(void);
void* CGClipGlyphsCreateCopyByApplyingTransform(void);
void* CGClipGlyphsEqualToClipGlyphs(void);
void* CGClipGlyphsGetAdvanceAtIndex(void);
void* CGClipGlyphsGetAdvances(void);
void* CGClipGlyphsGetBounds(void);
void* CGClipGlyphsGetCount(void);
void* CGClipGlyphsGetFont(void);
void* CGClipGlyphsGetFontAtIndex(void);
void* CGClipGlyphsGetFontRenderingStyle(void);
void* CGClipGlyphsGetFontRenderingStyleAtIndex(void);
void* CGClipGlyphsGetGlyphAtIndex(void);
void* CGClipGlyphsGetGlyphs(void);
void* CGClipGlyphsGetLength(void);
void* CGClipGlyphsGetMatrix(void);
void* CGClipGlyphsGetMatrixAtIndex(void);
void* CGClipGlyphsRelease(void);
void* CGClipGlyphsRetain(void);
void* CGClipMaskCreate(void);
void* CGClipMaskCreateCopy(void);
void* CGClipMaskCreateCopyByApplyingTransform(void);
void* CGClipMaskEqualToClipMask(void);
void* CGClipMaskGetBounds(void);
void* CGClipMaskGetImage(void);
void* CGClipMaskGetMatrix(void);
void* CGClipMaskGetRect(void);
void* CGClipMaskRelease(void);
void* CGClipMaskRetain(void);
void* CGClipRelease(void);
void* CGClipRetain(void);
void* CGClipStackAddClip(void);
void* CGClipStackAddRect(void);
void* CGClipStackContainsMask(void);
void* CGClipStackCreateCopy(void);
void* CGClipStackCreateMutable(void);
void* CGClipStackCreateMutableCopy(void);
void* CGClipStackEqual(void);
void* CGClipStackGetBounds(void);
void* CGClipStackGetClipAtIndex(void);
void* CGClipStackGetCount(void);
void* CGClipStackGetIdentifier(void);
void* CGClipStackGetRect(void);
void* CGClipStackIsInfinite(void);
void* CGClipStackPrint(void);
void* CGClipStackRelease(void);
void* CGClipStackRetain(void);
void* CGClipStrokeCreate(void);
void* CGClipStrokeCreateCopy(void);
void* CGClipStrokeCreateCopyWithTransform(void);
void* CGClipStrokeCreateStrokedPath(void);
void* CGClipStrokeCreateWithGState(void);
void* CGClipStrokeGetDash(void);
void* CGClipStrokeGetFlatness(void);
void* CGClipStrokeGetLineCap(void);
void* CGClipStrokeGetLineJoin(void);
void* CGClipStrokeGetLineWidth(void);
void* CGClipStrokeGetMatrix(void);
void* CGClipStrokeGetMiterLimit(void);
void* CGClipStrokeGetShouldAntialias(void);
void* CGClipStrokeGetStrokeAdjust(void);
void* CGClipStrokeRelease(void);
void* CGClipStrokeRetain(void);
void* CGColorCodeFragmentGetParametricConversion(void);
void* CGColorCodeFragmentGetParametricCount(void);
void* CGColorCodeFragmentGetTextureData(void);
void* CGColorCodeFragmentGetTextureFormat(void);
void* CGColorCodeFragmentGetTextureGridPoints(void);
void* CGColorCodeFragmentRelease(void);
void* CGColorConversionInfoCreate(void);
void* CGColorConversionInfoCreateFromList(void);
void* CGColorConversionInfoCreateFromListWithArguments(void);
void* CGColorConversionInfoCreateWithOptions(void);
void* CGColorConversionInfoGetTypeID(void);
void* CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks(void);
void* CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacksAndOptions(void);
void* CGColorConversionInfoIterateFunctionsWithCallbacks(void);
void* CGColorConverterCreate(void);
void* CGColorConverterCreateSimple(void);
void* CGColorConverterGetTypeID(void);
void* CGColorConverterIterateColorSpaceFunctionsWithCallbacks(void);
void* CGColorConverterIterateFunctionsWithCallbacks(void);
void* CGColorConverterRelease(void);
void* CGColorConverterRetain(void);
void* CGColorCreate(void);
void* CGColorCreateCopy(void);
void* CGColorCreateCopyByMatchingToColorSpace(void);
void* CGColorCreateCopyWithAlpha(void);
void* CGColorCreateGenericCMYK(void);
void* CGColorCreateGenericGray(void);
void* CGColorCreateGenericRGB(void);
void* CGColorCreateWithPattern(void);
void* CGColorCurveEqualToGammaCurve(void);
void* CGColorCurveGetGamma(void);
void* CGColorCurveGetParameters(void);
void* CGColorCurveGetTRC(void);
void* CGColorCurveMapValue(void);
void* CGColorCurvePrint(void);
void* CGColorCurveRelease(void);
void* CGColorCurveRetain(void);
void* CGColorEqualToColor(void);
void* CGColorFunctionGetOptions(void);
void* CGColorFunctionGetProperties(void);
void* CGColorGetAlpha(void);
void* CGColorGetColorSpace(void);
void* CGColorGetComponents(void);
void* CGColorGetConstantColor(void);
void* CGColorGetIdentifier(void);
void* CGColorGetNumberOfComponents(void);
void* CGColorGetPattern(void);
void* CGColorGetPatternBaseColor(void);
void* CGColorGetTypeID(void);
void* CGColorMatrixConcat(void);
void* CGColorMatrixGetMatrix(void);
void* CGColorMatrixGetTypeID(void);
void* CGColorMatrixIsIdentity(void);
void* CGColorMatrixMake(void);
void* CGColorMatrixMakeIdentity(void);
void* CGColorNxMLUTGetLUT(void);
void* CGColorNxMLUTGetTypeID(void);
void* CGColorNxMTransformGetTransform(void);
void* CGColorNxMTransformGetTypeID(void);
void* CGColorRelease(void);
void* CGColorRetain(void);
void* CGColorSpaceConcatenate(void);
void* CGColorSpaceCopyColorTable(void);
void* CGColorSpaceCopyDefaultColor(void);
void* CGColorSpaceCopyICCData(void);
void* CGColorSpaceCopyICCProfile(void);
void* CGColorSpaceCopyICCProfileASCIIDescriptionString(void);
void* CGColorSpaceCopyICCProfileDescription(void);
void* CGColorSpaceCopyName(void);
void* CGColorSpaceCopyPropertyList(void);
void* CGColorSpaceCreateCalibratedGray(void);
void* CGColorSpaceCreateCalibratedRGB(void);
void* CGColorSpaceCreateConversionCurve(void);
void* CGColorSpaceCreateDeviceCMYK(void);
void* CGColorSpaceCreateDeviceGray(void);
void* CGColorSpaceCreateDeviceN(void);
void* CGColorSpaceCreateDeviceRGB(void);
void* CGColorSpaceCreateDisplayColorSpaceWithID(void);
void* CGColorSpaceCreateDisplayGray(void);
void* CGColorSpaceCreateDisplayRGB(void);
void* CGColorSpaceCreateDisplayRGBWithID(void);
void* CGColorSpaceCreateICCBased(void);
void* CGColorSpaceCreateIndexed(void);
void* CGColorSpaceCreateLab(void);
void* CGColorSpaceCreateLinearized(void);
void* CGColorSpaceCreatePattern(void);
void* CGColorSpaceCreatePlatformProfile(void);
void* CGColorSpaceCreateSystemDefaultCMYK(void);
void* CGColorSpaceCreateSystemDefaultGray(void);
void* CGColorSpaceCreateSystemDefaultRGB(void);
void* CGColorSpaceCreateWithICCData(void);
void* CGColorSpaceCreateWithICCProfile(void);
void* CGColorSpaceCreateWithName(void);
void* CGColorSpaceCreateWithPlatformColorSpace(void);
void* CGColorSpaceCreateWithPropertyList(void);
void* CGColorSpaceEqualToColorSpace(void);
void* CGColorSpaceEqualToColorSpaceIgnoringRange(void);
void* CGColorSpaceGetAlternateColorSpace(void);
void* CGColorSpaceGetBaseColorSpace(void);
void* CGColorSpaceGetCalibratedGrayData(void);
void* CGColorSpaceGetCalibratedRGBData(void);
void* CGColorSpaceGetColorSpaceModel(void);
void* CGColorSpaceGetColorTable(void);
void* CGColorSpaceGetColorTableCount(void);
void* CGColorSpaceGetColorants(void);
void* CGColorSpaceGetConversionMatrix(void);
void* CGColorSpaceGetDescriptor(void);
void* CGColorSpaceGetIdentifier(void);
void* CGColorSpaceGetLabData(void);
void* CGColorSpaceGetMD5Digest(void);
void* CGColorSpaceGetModel(void);
void* CGColorSpaceGetName(void);
void* CGColorSpaceGetNames(void);
void* CGColorSpaceGetNumberOfComponents(void);
void* CGColorSpaceGetProcessColorModel(void);
void* CGColorSpaceGetRenderingIntent(void);
void* CGColorSpaceGetTintTransform(void);
void* CGColorSpaceGetType(void);
void* CGColorSpaceGetTypeID(void);
void* CGColorSpaceICCGetPlatformProfile(void);
void* CGColorSpaceICCGetRange(void);
void* CGColorSpaceIgnoresIntent(void);
void* CGColorSpaceIsICCCompatible(void);
void* CGColorSpaceIsPSLevel2Compatible(void);
void* CGColorSpaceIsUncalibrated(void);
void* CGColorSpaceIsWideGamutRGB(void);
void* CGColorSpaceRelease(void);
void* CGColorSpaceRetain(void);
void* CGColorSpaceStreamPSDefinition(void);
void* CGColorSpaceSupportsOutput(void);
void* CGColorSpaceUsesExtendedRange(void);
void* CGColorTRCGetFunction(void);
void* CGColorTRCGetGammaID(void);
void* CGColorTRCGetTypeID(void);
void* CGColorTRCPureGammaOriginal(void);
void* CGColorTransformConvertColor(void);
void* CGColorTransformConvertColorComponents(void);
void* CGColorTransformConvertColorFloatComponents(void);
void* CGColorTransformConvertComponentData(void);
void* CGColorTransformConvertData(void);
void* CGColorTransformConvertImage(void);
void* CGColorTransformConvertNeedsCMS(void);
void* CGColorTransformConvertRequired(void);
void* CGColorTransformCreate(void);
void* CGColorTransformCreateCodeFragment(void);
void* CGColorTransformCreateLookupTextureCodeFragment(void);
void* CGColorTransformCreateParametricCodeFragment(void);
void* CGColorTransformGetColorSpace(void);
void* CGColorTransformGetIdentifier(void);
void* CGColorTransformGetMD5(void);
void* CGColorTransformGetTypeID(void);
void* CGColorTransformRelease(void);
void* CGColorTransformRetain(void);
void* CGContainerGetRect(void);
void* CGContainerGetTypeID(void);
void* CGContextAddArc(void);
void* CGContextAddArcToPoint(void);
void* CGContextAddCurveToPoint(void);
void* CGContextAddEllipseInRect(void);
void* CGContextAddFilter(void);
void* CGContextAddLineToPoint(void);
void* CGContextAddLines(void);
void* CGContextAddPath(void);
void* CGContextAddQuadCurveToPoint(void);
void* CGContextAddRect(void);
void* CGContextAddRects(void);
void* CGContextBeginPage(void);
void* CGContextBeginPage2(void);
void* CGContextBeginPath(void);
void* CGContextBeginTransparencyLayer(void);
void* CGContextBeginTransparencyLayerWithRect(void);
void* CGContextClear(void);
void* CGContextClearRect(void);
void* CGContextClip(void);
void* CGContextClipToMask(void);
void* CGContextClipToRect(void);
void* CGContextClipToRects(void);
void* CGContextClipToTextClipping(void);
void* CGContextClosePath(void);
void* CGContextColorIsExtendedRGB(void);
void* CGContextConcatCTM(void);
void* CGContextConvertPointToDeviceSpace(void);
void* CGContextConvertPointToUserSpace(void);
void* CGContextConvertRectToDeviceSpace(void);
void* CGContextConvertRectToUserSpace(void);
void* CGContextConvertSizeToDeviceSpace(void);
void* CGContextConvertSizeToUserSpace(void);
void* CGContextCopyDeviceColorSpace(void);
void* CGContextCopyPath(void);
void* CGContextCopyTopGState(void);
void* CGContextCreate(void);
void* CGContextCreateWithDelegate(void);
void* CGContextCreateWithDelegateAndInfo(void);
void* CGContextDelegateBeginLayer(void);
void* CGContextDelegateBeginPage(void);
void* CGContextDelegateCreate(void);
void* CGContextDelegateCreateFilter(void);
void* CGContextDelegateCreateWithCallbacks(void);
void* CGContextDelegateDrawConicGradient(void);
void* CGContextDelegateDrawDisplayList(void);
void* CGContextDelegateDrawGlyphs(void);
void* CGContextDelegateDrawImage(void);
void* CGContextDelegateDrawImageFromRect(void);
void* CGContextDelegateDrawImages(void);
void* CGContextDelegateDrawLayer(void);
void* CGContextDelegateDrawLinearGradient(void);
void* CGContextDelegateDrawLines(void);
void* CGContextDelegateDrawPath(void);
void* CGContextDelegateDrawPathDirect(void);
void* CGContextDelegateDrawRadialGradient(void);
void* CGContextDelegateDrawRects(void);
void* CGContextDelegateDrawShading(void);
void* CGContextDelegateDrawWindowContents(void);
void* CGContextDelegateEndLayer(void);
void* CGContextDelegateEndPage(void);
void* CGContextDelegateFinalize(void);
void* CGContextDelegateGetBitmapContextInfo(void);
void* CGContextDelegateGetBounds(void);
void* CGContextDelegateGetCallback(void);
void* CGContextDelegateGetColorTransform(void);
void* CGContextDelegateGetDelegate(void);
void* CGContextDelegateGetInfo(void);
void* CGContextDelegateGetLayer(void);
void* CGContextDelegateGetNext(void);
void* CGContextDelegateGetTransform(void);
void* CGContextDelegateGetTypeID(void);
void* CGContextDelegateImplementsCallback(void);
void* CGContextDelegateOperation(void);
void* CGContextDelegateRelease(void);
void* CGContextDelegateRetain(void);
void* CGContextDelegateSetCallback(void);
void* CGContextDelegateSetCallbacks(void);
void* CGContextDelegateSetNext(void);
void* CGContextDrawConicGradient(void);
void* CGContextDrawDisplayList(void);
void* CGContextDrawImage(void);
void* CGContextDrawImageFromRect(void);
void* CGContextDrawImageWithOptions(void);
void* CGContextDrawImages(void);
void* CGContextDrawLayerAtPoint(void);
void* CGContextDrawLayerInRect(void);
void* CGContextDrawLinearGradient(void);
void* CGContextDrawPDFAnnotation(void);
void* CGContextDrawPDFDocument(void);
void* CGContextDrawPDFPage(void);
void* CGContextDrawPDFPageInRect(void);
void* CGContextDrawPDFPageInRect2(void);
void* CGContextDrawPDFPageWithAnnotations(void);
void* CGContextDrawPDFPageWithDrawingCallbacks(void);
void* CGContextDrawPDFPageWithProgressCallback(void);
void* CGContextDrawPath(void);
void* CGContextDrawPathDirect(void);
void* CGContextDrawPatternCell(void);
void* CGContextDrawRadialGradient(void);
void* CGContextDrawShading(void);
void* CGContextDrawTiledImage(void);
void* CGContextDrawsWithCorrectShadowOffsets(void);
void* CGContextEOClip(void);
void* CGContextEOFillPath(void);
void* CGContextEndPage(void);
void* CGContextEndPage2(void);
void* CGContextEndTransparencyLayer(void);
void* CGContextErase(void);
void* CGContextFillEllipseInRect(void);
void* CGContextFillPath(void);
void* CGContextFillRect(void);
void* CGContextFillRects(void);
void* CGContextFilterCreateDictionaryWithURL(void);
void* CGContextFlush(void);
void* CGContextGetAdjustedLineWidth(void);
void* CGContextGetAllowedFontRenderingStyle(void);
void* CGContextGetAllowsAntialiasing(void);
void* CGContextGetAllowsDithering(void);
void* CGContextGetAllowsFontAntialiasing(void);
void* CGContextGetAllowsFontSmoothing(void);
void* CGContextGetAllowsFontSubpixelPositioning(void);
void* CGContextGetAllowsFontSubpixelQuantization(void);
void* CGContextGetAlpha(void);
void* CGContextGetAlphaIsShape(void);
void* CGContextGetBaseCTM(void);
void* CGContextGetBlackGeneration(void);
void* CGContextGetBlendMode(void);
void* CGContextGetCTM(void);
void* CGContextGetCharacterSpacing(void);
void* CGContextGetClipBoundingBox(void);
void* CGContextGetColorTransform(void);
void* CGContextGetCompositeOperation(void);
void* CGContextGetContentMD5(void);
void* CGContextGetDefaultUserSpaceToDeviceSpaceTransform(void);
void* CGContextGetDelegate(void);
void* CGContextGetDelegateInfo(void);
void* CGContextGetDeviceClipBoundingBox(void);
void* CGContextGetFillColor(void);
void* CGContextGetFillColorAsColor(void);
void* CGContextGetFillColorSpace(void);
void* CGContextGetFillOverprint(void);
void* CGContextGetFillPattern(void);
void* CGContextGetFlatness(void);
void* CGContextGetFont(void);
void* CGContextGetFontAntialiasingStyle(void);
void* CGContextGetFontDilation(void);
void* CGContextGetFontRenderingStyle(void);
void* CGContextGetFontSize(void);
void* CGContextGetFontSmoothingBackgroundColor(void);
void* CGContextGetFontSmoothingContrast(void);
void* CGContextGetFontSmoothingStyle(void);
void* CGContextGetFontSubpixelQuantizationLevel(void);
void* CGContextGetGState(void);
void* CGContextGetGStateMark(void);
void* CGContextGetGlyphAdvances(void);
void* CGContextGetIdentifier(void);
void* CGContextGetImageRenderingIntent(void);
void* CGContextGetInterpolationQuality(void);
void* CGContextGetInterpolationQualityRange(void);
void* CGContextGetLineCap(void);
void* CGContextGetLineDashCount(void);
void* CGContextGetLineDashPattern(void);
void* CGContextGetLineJoin(void);
void* CGContextGetLineWidth(void);
void* CGContextGetLineWidthThreshold(void);
void* CGContextGetMiterLimit(void);
void* CGContextGetOverprintMode(void);
void* CGContextGetPathBoundingBox(void);
void* CGContextGetPathCurrentPoint(void);
void* CGContextGetPatternPhase(void);
void* CGContextGetPixelAccess(void);
void* CGContextGetProperty(void);
void* CGContextGetRenderingIntent(void);
void* CGContextGetRenderingResolution(void);
void* CGContextGetRenderingState(void);
void* CGContextGetShouldAntialias(void);
void* CGContextGetShouldAntialiasFonts(void);
void* CGContextGetShouldDrawBitmapRuns(void);
void* CGContextGetShouldSmoothFonts(void);
void* CGContextGetShouldSubpixelPositionFonts(void);
void* CGContextGetShouldSubpixelQuantizeFonts(void);
void* CGContextGetShouldUsePlatformNativeGlyphs(void);
void* CGContextGetSmoothness(void);
void* CGContextGetSoftMask(void);
void* CGContextGetStrokeAdjust(void);
void* CGContextGetStrokeColor(void);
void* CGContextGetStrokeColorAsColor(void);
void* CGContextGetStrokeColorSpace(void);
void* CGContextGetStrokeOverprint(void);
void* CGContextGetStrokePattern(void);
void* CGContextGetStyle(void);
void* CGContextGetTextDrawingMode(void);
void* CGContextGetTextGreekingThreshold(void);
void* CGContextGetTextMatrix(void);
void* CGContextGetTextPosition(void);
void* CGContextGetTransferFunctions(void);
void* CGContextGetType(void);
void* CGContextGetTypeID(void);
void* CGContextGetUndercolorRemoval(void);
void* CGContextGetUserSpaceToDeviceSpaceTransform(void);
void* CGContextHandleInvalid(void);
void* CGContextIsEmptyClipBoundingBox(void);
void* CGContextIsPathEmpty(void);
void* CGContextMoveToPoint(void);
void* CGContextPathContainsPoint(void);
void* CGContextRelease(void);
void* CGContextRemoveFilter(void);
void* CGContextReplacePathWithClipPath(void);
void* CGContextReplacePathWithShapePath(void);
void* CGContextReplacePathWithStrokedPath(void);
void* CGContextReplaceTopGState(void);
void* CGContextResetCTM(void);
void* CGContextResetClip(void);
void* CGContextResetState(void);
void* CGContextResetTopGState(void);
void* CGContextRestoreGState(void);
void* CGContextRestoreToGStateMark(void);
void* CGContextRetain(void);
void* CGContextRotateCTM(void);
void* CGContextSaveGState(void);
void* CGContextScaleCTM(void);
void* CGContextSelectFont(void);
void* CGContextSetAllowsAntialiasing(void);
void* CGContextSetAllowsDithering(void);
void* CGContextSetAllowsFontAntialiasing(void);
void* CGContextSetAllowsFontSmoothing(void);
void* CGContextSetAllowsFontSubpixelPositioning(void);
void* CGContextSetAllowsFontSubpixelQuantization(void);
void* CGContextSetAlpha(void);
void* CGContextSetAlphaIsShape(void);
void* CGContextSetBaseCTM(void);
void* CGContextSetBlackGeneration(void);
void* CGContextSetBlendMode(void);
void* CGContextSetCMYKFillColor(void);
void* CGContextSetCMYKStrokeColor(void);
void* CGContextSetCTM(void);
void* CGContextSetCharacterSpacing(void);
void* CGContextSetCompositeOperation(void);
void* CGContextSetDelegate(void);
void* CGContextSetFillColor(void);
void* CGContextSetFillColorSpace(void);
void* CGContextSetFillColorWithColor(void);
void* CGContextSetFillOverprint(void);
void* CGContextSetFillPattern(void);
void* CGContextSetFlatness(void);
void* CGContextSetFlush(void);
void* CGContextSetFocusRingWithColor(void);
void* CGContextSetFont(void);
void* CGContextSetFontAntialiasingStyle(void);
void* CGContextSetFontDilation(void);
void* CGContextSetFontRenderingMode(void);
void* CGContextSetFontRenderingStyle(void);
void* CGContextSetFontSize(void);
void* CGContextSetFontSmoothingBackgroundColor(void);
void* CGContextSetFontSmoothingContrast(void);
void* CGContextSetFontSmoothingStyle(void);
void* CGContextSetFontSubpixelQuantizationLevel(void);
void* CGContextSetGrayFillColor(void);
void* CGContextSetGrayStrokeColor(void);
void* CGContextSetImageRenderingIntent(void);
void* CGContextSetImageReplacer(void);
void* CGContextSetInterpolationQuality(void);
void* CGContextSetInterpolationQualityRange(void);
void* CGContextSetLineCap(void);
void* CGContextSetLineDash(void);
void* CGContextSetLineJoin(void);
void* CGContextSetLineWidth(void);
void* CGContextSetLineWidthThreshold(void);
void* CGContextSetMiterLimit(void);
void* CGContextSetOverprintMode(void);
void* CGContextSetPatternPhase(void);
void* CGContextSetProperty(void);
void* CGContextSetRGBFillColor(void);
void* CGContextSetRGBStrokeColor(void);
void* CGContextSetRenderingIntent(void);
void* CGContextSetRenderingResolution(void);
void* CGContextSetShadow(void);
void* CGContextSetShadowWithColor(void);
void* CGContextSetShouldAntialias(void);
void* CGContextSetShouldAntialiasFonts(void);
void* CGContextSetShouldDrawBitmapRuns(void);
void* CGContextSetShouldSmoothFonts(void);
void* CGContextSetShouldSubpixelPositionFonts(void);
void* CGContextSetShouldSubpixelQuantizeFonts(void);
void* CGContextSetShouldUsePlatformNativeGlyphs(void);
void* CGContextSetSmoothness(void);
void* CGContextSetSoftMask(void);
void* CGContextSetStrokeAdjust(void);
void* CGContextSetStrokeColor(void);
void* CGContextSetStrokeColorSpace(void);
void* CGContextSetStrokeColorWithColor(void);
void* CGContextSetStrokeOverprint(void);
void* CGContextSetStrokePattern(void);
void* CGContextSetStyle(void);
void* CGContextSetTextDrawingMode(void);
void* CGContextSetTextGreekingThreshold(void);
void* CGContextSetTextMatrix(void);
void* CGContextSetTextPosition(void);
void* CGContextSetTransferFunctions(void);
void* CGContextSetUndercolorRemoval(void);
void* CGContextShowGlyphs(void);
void* CGContextShowGlyphsAtPoint(void);
void* CGContextShowGlyphsAtPositions(void);
void* CGContextShowGlyphsAtPositionsWithString(void);
void* CGContextShowGlyphsWithAdvances(void);
void* CGContextShowText(void);
void* CGContextShowTextAtPoint(void);
void* CGContextStrokeEllipseInRect(void);
void* CGContextStrokeLineSegments(void);
void* CGContextStrokePath(void);
void* CGContextStrokeRect(void);
void* CGContextStrokeRectWithWidth(void);
void* CGContextSynchronize(void);
void* CGContextTranslateCTM(void);
void* CGContextValidate(void);
void* CGContextWait(void);
void* CGCryptorCreateAES(void);
void* CGCryptorCreateRC4(void);
void* CGCryptorDrain(void);
void* CGCryptorGetCipher(void);
void* CGCryptorGetInitializationVector(void);
void* CGCryptorProcessBytes(void);
void* CGCryptorRelease(void);
void* CGCryptorReset(void);
void* CGDashCreate(void);
void* CGDashEqualToDash(void);
void* CGDashGetPattern(void);
void* CGDashRelease(void);
void* CGDashRetain(void);
void* CGDataConsumerClose(void);
void* CGDataConsumerCreate(void);
void* CGDataConsumerCreateFlateEncoder(void);
void* CGDataConsumerCreateWithCFData(void);
void* CGDataConsumerCreateWithFilename(void);
void* CGDataConsumerCreateWithURL(void);
void* CGDataConsumerFlush(void);
void* CGDataConsumerGetByteCount(void);
void* CGDataConsumerGetTypeID(void);
void* CGDataConsumerGetURL(void);
void* CGDataConsumerPrintf(void);
void* CGDataConsumerPutBytes(void);
void* CGDataConsumerRelease(void);
void* CGDataConsumerRetain(void);
void* CGDataConsumerVPrintf(void);
void* CGDataProviderAccessSessionBegin(void);
void* CGDataProviderAccessSessionEnd(void);
void* CGDataProviderCopyData(void);
void* CGDataProviderCreate(void);
void* CGDataProviderCreateDirect(void);
void* CGDataProviderCreateDirectAccess(void);
void* CGDataProviderCreateSequential(void);
void* CGDataProviderCreateWithCFData(void);
void* CGDataProviderCreateWithCopyOfData(void);
void* CGDataProviderCreateWithData(void);
void* CGDataProviderCreateWithFilename(void);
void* CGDataProviderCreateWithSwappedProvider(void);
void* CGDataProviderCreateWithURL(void);
void* CGDataProviderGetBytePointer(void);
void* CGDataProviderGetBytePtr(void);
void* CGDataProviderGetBytes(void);
void* CGDataProviderGetBytesAtPosition(void);
void* CGDataProviderGetChunks(void);
void* CGDataProviderGetInfo(void);
void* CGDataProviderGetSize(void);
void* CGDataProviderGetSize2(void);
void* CGDataProviderGetSizeOfData(void);
void* CGDataProviderGetTypeID(void);
void* CGDataProviderHasDataPtr(void);
void* CGDataProviderLock(void);
void* CGDataProviderRelease(void);
void* CGDataProviderReleaseBytePtr(void);
void* CGDataProviderRetain(void);
void* CGDataProviderRetainBytePtr(void);
void* CGDataProviderRewind(void);
void* CGDataProviderSkipBytes(void);
void* CGDataProviderSkipForward(void);
void* CGDataProviderUngetBytePtr(void);
void* CGDataProviderUnlock(void);
void* CGDefaultsCopyString(void);
void* CGDefaultsGetBoolean(void);
void* CGDefaultsGetInteger(void);
void* CGDigesterAddBytes(void);
void* CGDigesterCreateMD5(void);
void* CGDigesterGetDigest(void);
void* CGDigesterRelease(void);
void* CGDisplayList2Create(void);
void* CGDisplayList2CreateWithRect(void);
void* CGDisplayList2GetImpl(void);
void* CGDisplayList2GetTypeID(void);
void* CGDisplayListContainsTransparentContent(void);
void* CGDisplayListContextCreate(void);
void* CGDisplayListContextDelegateCreate(void);
void* CGDisplayListContextDelegateCreatePageBased(void);
void* CGDisplayListCreate(void);
void* CGDisplayListCreateWithRect(void);
void* CGDisplayListCreateWithURL(void);
void* CGDisplayListDelegateDrawDisplayList(void);
void* CGDisplayListDrawInContext(void);
void* CGDisplayListDrawInContextDelegate(void);
void* CGDisplayListDumpToFile(void);
void* CGDisplayListExecute(void);
void* CGDisplayListGetAuxiliaryInfo(void);
void* CGDisplayListGetBoundingBox(void);
void* CGDisplayListGetInfo(void);
void* CGDisplayListGetTypeID(void);
void* CGDisplayListRelease(void);
void* CGDisplayListReset(void);
void* CGDisplayListRetain(void);
void* CGDisplayListSerializeToURL(void);
void* CGDisplayListSetBoundingBox(void);
void* CGFloatIsValid(void);
void* CGFontApplyFunction(void);
void* CGFontCacheCreate(void);
void* CGFontCacheGetLocalCache(void);
void* CGFontCacheGetMaxSize(void);
void* CGFontCachePrint(void);
void* CGFontCacheRelease(void);
void* CGFontCacheRemoveFont(void);
void* CGFontCacheReset(void);
void* CGFontCacheResetAllCaches(void);
void* CGFontCacheRetain(void);
void* CGFontCacheSetMaxSize(void);
void* CGFontCacheSetShouldAutoExpire(void);
void* CGFontCanCreatePostScriptSubset(void);
void* CGFontCopyCharacterSet(void);
void* CGFontCopyFamilyName(void);
void* CGFontCopyFullName(void);
void* CGFontCopyGlyphNameForGlyph(void);
void* CGFontCopyLocalizedName(void);
void* CGFontCopyName(void);
void* CGFontCopyPath(void);
void* CGFontCopyPostScriptName(void);
void* CGFontCopyTableForTag(void);
void* CGFontCopyTableTags(void);
void* CGFontCopyURL(void);
void* CGFontCopyVariationAxes(void);
void* CGFontCopyVariations(void);
void* CGFontCreate(void);
void* CGFontCreateCopy(void);
void* CGFontCreateCopyWithVariations(void);
void* CGFontCreateFontSubset(void);
void* CGFontCreateFontsFromData(void);
void* CGFontCreateFontsWithPath(void);
void* CGFontCreateFontsWithURL(void);
void* CGFontCreateGlyphPath(void);
void* CGFontCreateMatchingFont(void);
void* CGFontCreatePostScriptEncoding(void);
void* CGFontCreatePostScriptSubset(void);
void* CGFontCreateWithDataProvider(void);
void* CGFontCreateWithFontName(void);
void* CGFontCreateWithName(void);
void* CGFontCreateWithPlatformFont(void);
void* CGFontCreateWithPlatformFontAndVariation(void);
void* CGFontCreateWithVariations(void);
void* CGFontDBAddFont(void);
void* CGFontDBAddFontReferencesAtPath(void);
void* CGFontDBAddFontsAtPath(void);
void* CGFontDBAddFontsFromPlist(void);
void* CGFontDBAddFontsInDirectory(void);
void* CGFontDBApplyFunction(void);
void* CGFontDBCreate(void);
void* CGFontDBCreatePlist(void);
void* CGFontDBGetFontWithName(void);
void* CGFontDBGetLocal(void);
void* CGFontDBPurgeFont(void);
void* CGFontDBRelease(void);
void* CGFontDBRemoveFont(void);
void* CGFontDBSetInitializer(void);
void* CGFontDefaultAllowsFontSmoothing(void);
void* CGFontDefaultGetAntialiasingStyle(void);
void* CGFontDefaultGetSmoothingContrast(void);
void* CGFontDefaultGetSmoothingStyle(void);
void* CGFontFinderApplyFunction(void);
void* CGFontFinderCopyAllURLs(void);
void* CGFontFinderCopyURLForName(void);
void* CGFontFinderCopyURLForPlatformFont(void);
void* CGFontFinderCreate(void);
void* CGFontFinderCreateFontWithName(void);
void* CGFontFinderCreateFontWithPlatformFont(void);
void* CGFontFinderGetDefault(void);
void* CGFontFinderRelease(void);
void* CGFontFinderRetain(void);
void* CGFontFinderSetDefault(void);
void* CGFontGetAscent(void);
void* CGFontGetCIDsForGlyphs(void);
void* CGFontGetCapHeight(void);
void* CGFontGetContainingBoundingBoxForGlyphs(void);
void* CGFontGetDescent(void);
void* CGFontGetDescriptor(void);
void* CGFontGetFontBBox(void);
void* CGFontGetFontSubsetFormat(void);
void* CGFontGetGlyphAdvances(void);
void* CGFontGetGlyphAdvancesForStyle(void);
void* CGFontGetGlyphBBoxes(void);
void* CGFontGetGlyphBBoxesForStyle(void);
void* CGFontGetGlyphBoundingBoxes(void);
void* CGFontGetGlyphForGlyphName(void);
void* CGFontGetGlyphIdentifiers(void);
void* CGFontGetGlyphNameForGlyph(void);
void* CGFontGetGlyphNameMaxLength(void);
void* CGFontGetGlyphPath(void);
void* CGFontGetGlyphPaths(void);
void* CGFontGetGlyphScaledAdvances(void);
void* CGFontGetGlyphTransformedAdvances(void);
void* CGFontGetGlyphVerticalAdvances(void);
void* CGFontGetGlyphVerticalOffsets(void);
void* CGFontGetGlyphWithGlyphName(void);
void* CGFontGetGlyphsForCIDs(void);
void* CGFontGetGlyphsForGlyphNames(void);
void* CGFontGetGlyphsForUnichars(void);
void* CGFontGetGlyphsForUnicodes(void);
void* CGFontGetHMetrics(void);
void* CGFontGetIdentifier(void);
void* CGFontGetInfo(void);
void* CGFontGetIntProperty(void);
void* CGFontGetItalicAngle(void);
void* CGFontGetLeading(void);
void* CGFontGetMaxUnichars(void);
void* CGFontGetNumberOfGlyphs(void);
void* CGFontGetParserFont(void);
void* CGFontGetPostScriptName(void);
void* CGFontGetProperty(void);
void* CGFontGetQuantizationLevelWithStyle(void);
void* CGFontGetRegistryOrderingSupplement(void);
void* CGFontGetStemV(void);
void* CGFontGetTypeID(void);
void* CGFontGetUnderlinePosition(void);
void* CGFontGetUnderlineThickness(void);
void* CGFontGetUnicharsForGlyph(void);
void* CGFontGetUnitsPerEm(void);
void* CGFontGetVMetrics(void);
void* CGFontGetVTable(void);
void* CGFontGetVariationAxes(void);
void* CGFontGetVariations(void);
void* CGFontGetXHeight(void);
void* CGFontIndexMapAddIndex(void);
void* CGFontIndexMapAddIndexes(void);
void* CGFontIndexMapAddRange(void);
void* CGFontIndexMapCreate(void);
void* CGFontIndexMapCreateIdentity(void);
void* CGFontIndexMapGetValue(void);
void* CGFontIndexMapGetValues(void);
void* CGFontIndexMapPrint(void);
void* CGFontIndexMapRelease(void);
void* CGFontIndexMapRetain(void);
void* CGFontIndexSetAddIndex(void);
void* CGFontIndexSetAddIndexRange(void);
void* CGFontIndexSetAddIndexes(void);
void* CGFontIndexSetContainsIndex(void);
void* CGFontIndexSetCreate(void);
void* CGFontIndexSetCreateCopy(void);
void* CGFontIndexSetGetCount(void);
void* CGFontIndexSetGetIndexRange(void);
void* CGFontIndexSetGetIndexVector(void);
void* CGFontIndexSetGetIndexVectorSize(void);
void* CGFontIndexSetGetIndexes(void);
void* CGFontIndexSetGetName(void);
void* CGFontIndexSetRelease(void);
void* CGFontIndexSetRetain(void);
void* CGFontIsBitmapOnly(void);
void* CGFontIsFixedPitch(void);
void* CGFontIsItalic(void);
void* CGFontNameTableCopyLocales(void);
void* CGFontNameTableCopyNameForLocale(void);
void* CGFontNameTableCopyRootName(void);
void* CGFontNameTableCreate(void);
void* CGFontNameTableGetPostScriptName(void);
void* CGFontNameTablePrint(void);
void* CGFontNameTableRelease(void);
void* CGFontQuantumEqualToQuantum(void);
void* CGFontRelease(void);
void* CGFontRenderingGetFontSmoothingDisabled(void);
void* CGFontRetain(void);
void* CGFontSetShouldUseMulticache(void);
void* CGFontURLCreate(void);
void* CGFunctionCopyPDFDescription(void);
void* CGFunctionCreate(void);
void* CGFunctionEvaluate(void);
void* CGFunctionEvaluateFloat(void);
void* CGFunctionGetAssociate(void);
void* CGFunctionGetDomain(void);
void* CGFunctionGetDomainDimension(void);
void* CGFunctionGetIdentifier(void);
void* CGFunctionGetRange(void);
void* CGFunctionGetRangeDimension(void);
void* CGFunctionGetTypeID(void);
void* CGFunctionIsIdentity(void);
void* CGFunctionRelease(void);
void* CGFunctionRetain(void);
void* CGFunctionSetAssociate(void);
void* CGFunctionSetProperty(void);
void* CGGLContextCreate(void);
void* CGGLContextUpdateViewportSize(void);
void* CGGStateClipToRect(void);
void* CGGStateCreate(void);
void* CGGStateCreateCopy(void);
void* CGGStateGetAdjustedLineWidth(void);
void* CGGStateGetAlpha(void);
void* CGGStateGetAlphaIsShape(void);
void* CGGStateGetBlackGeneration(void);
void* CGGStateGetCTM(void);
void* CGGStateGetCharacterSpacing(void);
void* CGGStateGetClipBoundingBox(void);
void* CGGStateGetClipRect(void);
void* CGGStateGetClipStack(void);
void* CGGStateGetCompositeOperation(void);
void* CGGStateGetFillColor(void);
void* CGGStateGetFillOverprint(void);
void* CGGStateGetFlatness(void);
void* CGGStateGetFont(void);
void* CGGStateGetFontAntialiasingStyle(void);
void* CGGStateGetFontDilation(void);
void* CGGStateGetFontRenderingStyle(void);
void* CGGStateGetFontSize(void);
void* CGGStateGetFontSmoothingBackgroundColor(void);
void* CGGStateGetFontSmoothingContrast(void);
void* CGGStateGetFontSmoothingStyle(void);
void* CGGStateGetFontSubpixelQuantizationLevel(void);
void* CGGStateGetFontSubpixelQuantizationStyle(void);
void* CGGStateGetImageRenderingIntent(void);
void* CGGStateGetInterpolationQuality(void);
void* CGGStateGetLineCap(void);
void* CGGStateGetLineDash(void);
void* CGGStateGetLineJoin(void);
void* CGGStateGetLineWidth(void);
void* CGGStateGetLineWidthThreshold(void);
void* CGGStateGetMiterLimit(void);
void* CGGStateGetOverprintMode(void);
void* CGGStateGetPatternPhase(void);
void* CGGStateGetRenderingIntent(void);
void* CGGStateGetShouldAntialias(void);
void* CGGStateGetShouldAntialiasFonts(void);
void* CGGStateGetShouldDrawBitmapRuns(void);
void* CGGStateGetShouldSmoothFonts(void);
void* CGGStateGetShouldSubpixelPositionFonts(void);
void* CGGStateGetShouldSubpixelQuantizeFonts(void);
void* CGGStateGetSmoothness(void);
void* CGGStateGetSoftMask(void);
void* CGGStateGetStrokeAdjust(void);
void* CGGStateGetStrokeColor(void);
void* CGGStateGetStrokeOverprint(void);
void* CGGStateGetStyle(void);
void* CGGStateGetTextDrawingMode(void);
void* CGGStateGetTextGreekingThreshold(void);
void* CGGStateGetTextKnockout(void);
void* CGGStateGetTransferFunctions(void);
void* CGGStateGetUndercolorRemoval(void);
void* CGGStateRelease(void);
void* CGGStateResetClip(void);
void* CGGStateRetain(void);
void* CGGStateSetAlpha(void);
void* CGGStateSetCTM(void);
void* CGGStateSetCompositeOperation(void);
void* CGGStateSetFillColor(void);
void* CGGStateSetFontDilation(void);
void* CGGStateSetPatternPhase(void);
void* CGGStateSetRenderingIntent(void);
void* CGGStateSetSoftMask(void);
void* CGGStateSetStrokeColor(void);
void* CGGStateSetStyle(void);
void* CGGetMD5DigestOfBytes(void);
void* CGGlyphBitmapCreate(void);
void* CGGlyphBitmapCreateWithPath(void);
void* CGGlyphBitmapCreateWithPathAndDilation(void);
void* CGGlyphBitmapRelease(void);
void* CGGlyphBitmapRetain(void);
void* CGGlyphBuilderCreate(void);
void* CGGlyphBuilderGetQuantizationLevel(void);
void* CGGlyphBuilderLockBitmaps(void);
void* CGGlyphBuilderRelease(void);
void* CGGlyphBuilderUnlockBitmaps(void);
void* CGGlyphLockAccess(void);
void* CGGlyphLockAccessCustomized(void);
void* CGGlyphLockCreate(void);
void* CGGlyphLockGetQuantizationLevel(void);
void* CGGlyphLockLockGlyphBitmaps(void);
void* CGGlyphLockRelease(void);
void* CGGlyphLockUnlock(void);
void* CGGradientApply(void);
void* CGGradientApplyWithBlock(void);
void* CGGradientCreateWithColorComponents(void);
void* CGGradientCreateWithColors(void);
void* CGGradientGetColorSpace(void);
void* CGGradientGetFunction(void);
void* CGGradientGetIdentifier(void);
void* CGGradientGetLocationCount(void);
void* CGGradientGetTypeID(void);
void* CGGradientPrint(void);
void* CGGradientRelease(void);
void* CGGradientRetain(void);
void* CGIOSurfaceContextCreate(void);
void* CGIOSurfaceContextCreateImage(void);
void* CGIOSurfaceContextCreateImageReference(void);
void* CGIOSurfaceContextGetBitmapInfo(void);
void* CGIOSurfaceContextGetBitsPerComponent(void);
void* CGIOSurfaceContextGetBitsPerPixel(void);
void* CGIOSurfaceContextGetColorSpace(void);
void* CGIOSurfaceContextGetDisplayMask(void);
void* CGIOSurfaceContextGetHeight(void);
void* CGIOSurfaceContextGetSizeLimits(void);
void* CGIOSurfaceContextGetSurface(void);
void* CGIOSurfaceContextGetWidth(void);
void* CGIOSurfaceContextSetDisplayMask(void);
void* CGImageBlockCreate(void);
void* CGImageBlockGetBytesPerRow(void);
void* CGImageBlockGetData(void);
void* CGImageBlockGetRect(void);
void* CGImageBlockRelease(void);
void* CGImageBlockSetCreate(void);
void* CGImageBlockSetCreateWithType(void);
void* CGImageBlockSetGetColorSpace(void);
void* CGImageBlockSetGetComponentType(void);
void* CGImageBlockSetGetCount(void);
void* CGImageBlockSetGetImageBlock(void);
void* CGImageBlockSetGetPixelSize(void);
void* CGImageBlockSetGetProperty(void);
void* CGImageBlockSetGetRect(void);
void* CGImageBlockSetGetSize(void);
void* CGImageBlockSetRelease(void);
void* CGImageBlockSetRetain(void);
void* CGImageBlockSetSetProperty(void);
void* CGImageCopyProperty(void);
void* CGImageCreate(void);
void* CGImageCreateCopy(void);
void* CGImageCreateCopyWithClipPath(void);
void* CGImageCreateCopyWithColorSpace(void);
void* CGImageCreateCopyWithOptions(void);
void* CGImageCreateCopyWithRenderingIntent(void);
void* CGImageCreateWithCGPDFStream(void);
void* CGImageCreateWithCoreImage(void);
void* CGImageCreateWithEPSDataProvider(void);
void* CGImageCreateWithImageInRect(void);
void* CGImageCreateWithImageProvider(void);
void* CGImageCreateWithJPEGDataProvider(void);
void* CGImageCreateWithJPEGDataProvider2(void);
void* CGImageCreateWithMask(void);
void* CGImageCreateWithMaskAndMatte(void);
void* CGImageCreateWithMaskingColor(void);
void* CGImageCreateWithMaskingColors(void);
void* CGImageCreateWithPNGDataProvider(void);
void* CGImageDumpToFile(void);
void* CGImageEPSRepCreate(void);
void* CGImageEPSRepGetAlternateImage(void);
void* CGImageEPSRepGetBBox(void);
void* CGImageEPSRepGetSource(void);
void* CGImageEPSRepRelease(void);
void* CGImageEPSRepRetain(void);
void* CGImageGetAlphaInfo(void);
void* CGImageGetBitmapInfo(void);
void* CGImageGetBitsPerComponent(void);
void* CGImageGetBitsPerPixel(void);
void* CGImageGetByteOrderInfo(void);
void* CGImageGetBytesPerRow(void);
void* CGImageGetCachingFlags(void);
void* CGImageGetClipPath(void);
void* CGImageGetColorSpace(void);
void* CGImageGetData(void);
void* CGImageGetDataProvider(void);
void* CGImageGetDecode(void);
void* CGImageGetEPSRep(void);
void* CGImageGetHeight(void);
void* CGImageGetIdentifier(void);
void* CGImageGetImageProvider(void);
void* CGImageGetMask(void);
void* CGImageGetMaskingColors(void);
void* CGImageGetMatte(void);
void* CGImageGetPixelFormatInfo(void);
void* CGImageGetProperty(void);
void* CGImageGetRenderingIntent(void);
void* CGImageGetShouldInterpolate(void);
void* CGImageGetTypeID(void);
void* CGImageGetUTType(void);
void* CGImageGetWidth(void);
void* CGImageHasAlpha(void);
void* CGImageIOSurfaceSetCreate(void);
void* CGImageIOSurfaceSetGetColorSpace(void);
void* CGImageIOSurfaceSetGetComponentType(void);
void* CGImageIOSurfaceSetGetCount(void);
void* CGImageIOSurfaceSetGetPixelSize(void);
void* CGImageIOSurfaceSetGetProperty(void);
void* CGImageIOSurfaceSetGetRect(void);
void* CGImageIOSurfaceSetGetSize(void);
void* CGImageIOSurfaceSetGetTypeID(void);
void* CGImageIOSurfaceSetRelease(void);
void* CGImageIOSurfaceSetRetain(void);
void* CGImageIOSurfaceSetSetProperty(void);
void* CGImageIsMask(void);
void* CGImageIsOptimizedForSharing(void);
void* CGImageIsSubimage(void);
void* CGImageMaskCreate(void);
void* CGImageNotificationCenter(void);
void* CGImageProviderCopyIOSurface(void);
void* CGImageProviderCopyIOSurfaceSet(void);
void* CGImageProviderCopyImageBlockSet(void);
void* CGImageProviderCopyImageBlockSetWithOptions(void);
void* CGImageProviderCopyImageTextureData(void);
void* CGImageProviderCreate(void);
void* CGImageProviderGetAlphaInfo(void);
void* CGImageProviderGetCallbackVersion(void);
void* CGImageProviderGetColorSpace(void);
void* CGImageProviderGetComponentType(void);
void* CGImageProviderGetInfo(void);
void* CGImageProviderGetPixelSize(void);
void* CGImageProviderGetProperty(void);
void* CGImageProviderGetSize(void);
void* CGImageProviderGetTypeID(void);
void* CGImageProviderRelease(void);
void* CGImageProviderRetain(void);
void* CGImageProviderSetProperty(void);
void* CGImageRelease(void);
void* CGImageRetain(void);
void* CGImageSetCachingFlags(void);
void* CGImageSetProperty(void);
void* CGImageSetSharedIdentifier(void);
void* CGImageSurfaceSetGetIOSurface(void);
void* CGImageTextureDataCopyProperties(void);
void* CGImageTextureDataCreate(void);
void* CGImageTextureDataGetColorSpace(void);
void* CGImageTextureDataGetDataWithBlock(void);
void* CGImageTextureDataGetNumberOfFaces(void);
void* CGImageTextureDataGetNumberOfMipmaps(void);
void* CGImageTextureDataGetOffsetWithBlock(void);
void* CGImageTextureDataGetPixelFormat(void);
void* CGImageTextureDataGetProperty(void);
void* CGImageTextureDataGetSize(void);
void* CGImageTextureDataGetTypeID(void);
void* CGImageTextureDataIsCompressed(void);
void* CGImageTextureDataRelease(void);
void* CGImageTextureDataRetain(void);
void* CGImageTextureDataSetProperty(void);
void* CGImageTextureDataSupportsTiledLayout(void);
void* CGImageWriteToFile(void);
void* CGKSeparationContextCreateWithDictionary(void);
void* CGKSeparationContextRelease(void);
void* CGLayerCreateWithContext(void);
void* CGLayerGetContext(void);
void* CGLayerGetSize(void);
void* CGLayerGetTypeID(void);
void* CGLayerRelease(void);
void* CGLayerRetain(void);
void* CGLibraryLoadFunction(void);
void* CGNotificationCenterAddCallback(void);
void* CGNotificationCenterRemoveCallback(void);
void* CGPDFAdvancesCreate(void);
void* CGPDFAdvancesGetHorizontalAdvance(void);
void* CGPDFAdvancesGetVerticalAdvance(void);
void* CGPDFAdvancesPrint(void);
void* CGPDFAdvancesRelease(void);
void* CGPDFAdvancesValidate(void);
void* CGPDFAnnotationCreate(void);
void* CGPDFAnnotationCreateWithCGPDFDictionary(void);
void* CGPDFAnnotationGetBurnIn(void);
void* CGPDFAnnotationGetCGPDFDictionary(void);
void* CGPDFAnnotationGetDictionary(void);
void* CGPDFAnnotationGetHash(void);
void* CGPDFAnnotationGetRect(void);
void* CGPDFAnnotationGetTag(void);
void* CGPDFAnnotationGetType(void);
void* CGPDFAnnotationGetTypeID(void);
void* CGPDFAnnotationIsGhost(void);
void* CGPDFAnnotationIsPristine(void);
void* CGPDFAnnotationIsSupportedType(void);
void* CGPDFAnnotationIsVersioned(void);
void* CGPDFAnnotationSetAnnotationForKey(void);
void* CGPDFAnnotationSetBurnIn(void);
void* CGPDFAnnotationSetIsGhost(void);
void* CGPDFAnnotationSetTag(void);
void* CGPDFArrayApplyBlock(void);
void* CGPDFArrayGetArray(void);
void* CGPDFArrayGetBoolean(void);
void* CGPDFArrayGetCount(void);
void* CGPDFArrayGetDictionary(void);
void* CGPDFArrayGetInteger(void);
void* CGPDFArrayGetIntegers(void);
void* CGPDFArrayGetName(void);
void* CGPDFArrayGetNull(void);
void* CGPDFArrayGetNumber(void);
void* CGPDFArrayGetNumbers(void);
void* CGPDFArrayGetObject(void);
void* CGPDFArrayGetOffset(void);
void* CGPDFArrayGetStream(void);
void* CGPDFArrayGetString(void);
void* CGPDFArrayGetUnresolvedObject(void);
void* CGPDFArrayPrint(void);
void* CGPDFArrayPrintWithIndent(void);
void* CGPDFArrayRelease(void);
void* CGPDFArrayRetain(void);
void* CGPDFBase14GetBase14Name(void);
void* CGPDFBase14GetInfo(void);
void* CGPDFBase14InfoGetAdvances(void);
void* CGPDFCMapCreate(void);
void* CGPDFCMapCreateWithName(void);
void* CGPDFCMapGetCIDsForText(void);
void* CGPDFCMapGetMaxUnicodes(void);
void* CGPDFCMapGetName(void);
void* CGPDFCMapGetROS(void);
void* CGPDFCMapGetUnicodeCMap(void);
void* CGPDFCMapGetUnicodesForIndex(void);
void* CGPDFCMapGetZapfTable(void);
void* CGPDFCMapIsHorizontal(void);
void* CGPDFCMapRelease(void);
void* CGPDFContentStreamCreateResolvedColor(void);
void* CGPDFContentStreamCreateResolvedColorSpace(void);
void* CGPDFContentStreamCreateWithPage(void);
void* CGPDFContentStreamCreateWithStream(void);
void* CGPDFContentStreamGetColorSpace(void);
void* CGPDFContentStreamGetExtGState(void);
void* CGPDFContentStreamGetFont(void);
void* CGPDFContentStreamGetPattern(void);
void* CGPDFContentStreamGetPropertyList(void);
void* CGPDFContentStreamGetResource(void);
void* CGPDFContentStreamGetShading(void);
void* CGPDFContentStreamGetStreams(void);
void* CGPDFContentStreamGetXObject(void);
void* CGPDFContentStreamRelease(void);
void* CGPDFContentStreamRetain(void);
void* CGPDFContextAddAnnotation(void);
void* CGPDFContextAddCatalogEntry(void);
void* CGPDFContextAddDestinationAtPoint(void);
void* CGPDFContextAddDocumentMetadata(void);
void* CGPDFContextAddPDFXInfo(void);
void* CGPDFContextBeginPage(void);
void* CGPDFContextBeginTag(void);
void* CGPDFContextClose(void);
void* CGPDFContextCreate(void);
void* CGPDFContextCreateWithFilename(void);
void* CGPDFContextCreateWithURL(void);
void* CGPDFContextEndPage(void);
void* CGPDFContextEndTag(void);
void* CGPDFContextSetDestinationForRect(void);
void* CGPDFContextSetImageTag(void);
void* CGPDFContextSetOutline(void);
void* CGPDFContextSetOutputIntent(void);
void* CGPDFContextSetURLForRect(void);
void* CGPDFDictionaryApplyBlock(void);
void* CGPDFDictionaryApplyFunction(void);
void* CGPDFDictionaryApplyFunctionRaw(void);
void* CGPDFDictionaryGetArray(void);
void* CGPDFDictionaryGetBoolean(void);
void* CGPDFDictionaryGetBooleans(void);
void* CGPDFDictionaryGetCount(void);
void* CGPDFDictionaryGetDictionary(void);
void* CGPDFDictionaryGetInteger(void);
void* CGPDFDictionaryGetIntegers(void);
void* CGPDFDictionaryGetMatrix(void);
void* CGPDFDictionaryGetName(void);
void* CGPDFDictionaryGetNumber(void);
void* CGPDFDictionaryGetNumbers(void);
void* CGPDFDictionaryGetObject(void);
void* CGPDFDictionaryGetOffset(void);
void* CGPDFDictionaryGetOwner(void);
void* CGPDFDictionaryGetRect(void);
void* CGPDFDictionaryGetStream(void);
void* CGPDFDictionaryGetString(void);
void* CGPDFDictionaryGetUnresolvedObject(void);
void* CGPDFDictionaryPrint(void);
void* CGPDFDictionaryPrintWithIndent(void);
void* CGPDFDictionaryRelease(void);
void* CGPDFDictionaryRetain(void);
void* CGPDFDocumentAllowsCopying(void);
void* CGPDFDocumentAllowsPrinting(void);
void* CGPDFDocumentAppendChanges(void);
void* CGPDFDocumentAppendMetadata(void);
void* CGPDFDocumentAppendPage(void);
void* CGPDFDocumentAuthenticateOwnerPassword(void);
void* CGPDFDocumentAuthenticateUserPassword(void);
void* CGPDFDocumentCopyInfoDictionary(void);
void* CGPDFDocumentCopyOutputIntents(void);
void* CGPDFDocumentCopyPage(void);
void* CGPDFDocumentCopyToConsumer(void);
void* CGPDFDocumentCopyToConsumerWithChanges(void);
void* CGPDFDocumentCreateWithProvider(void);
void* CGPDFDocumentCreateWithURL(void);
void* CGPDFDocumentEnableMRUMode(void);
void* CGPDFDocumentEnableTaggedStructureSerialization(void);
void* CGPDFDocumentExchangePagesAtIndices(void);
void* CGPDFDocumentGetAccessPermissions(void);
void* CGPDFDocumentGetArtBox(void);
void* CGPDFDocumentGetBleedBox(void);
void* CGPDFDocumentGetCatalog(void);
void* CGPDFDocumentGetCropBox(void);
void* CGPDFDocumentGetDataProvider(void);
void* CGPDFDocumentGetDestination(void);
void* CGPDFDocumentGetID(void);
void* CGPDFDocumentGetInfo(void);
void* CGPDFDocumentGetMediaBox(void);
void* CGPDFDocumentGetNumberOfObjects(void);
void* CGPDFDocumentGetNumberOfPages(void);
void* CGPDFDocumentGetObject(void);
void* CGPDFDocumentGetOutline(void);
void* CGPDFDocumentGetPage(void);
void* CGPDFDocumentGetPageDictionary(void);
void* CGPDFDocumentGetPageForPageDictionary(void);
void* CGPDFDocumentGetPageNumberForPageDictionary(void);
void* CGPDFDocumentGetPermissions(void);
void* CGPDFDocumentGetProperty(void);
void* CGPDFDocumentGetRotationAngle(void);
void* CGPDFDocumentGetTrimBox(void);
void* CGPDFDocumentGetTypeID(void);
void* CGPDFDocumentGetURL(void);
void* CGPDFDocumentGetVersion(void);
void* CGPDFDocumentInsertPageAtIndex(void);
void* CGPDFDocumentIsEncrypted(void);
void* CGPDFDocumentIsLinearized(void);
void* CGPDFDocumentIsTaggedPDF(void);
void* CGPDFDocumentIsUnlocked(void);
void* CGPDFDocumentIsUnlockedAsOwner(void);
void* CGPDFDocumentPrintObject(void);
void* CGPDFDocumentRelease(void);
void* CGPDFDocumentRemovePageAtIndex(void);
void* CGPDFDocumentRemoveProperty(void);
void* CGPDFDocumentRetain(void);
void* CGPDFDocumentSetDeviceCMYKColorSpace(void);
void* CGPDFDocumentSetDeviceGrayColorSpace(void);
void* CGPDFDocumentSetDeviceRGBColorSpace(void);
void* CGPDFDocumentSetProperty(void);
void* CGPDFDocumentUnlockAsOwnerWithPassword(void);
void* CGPDFDocumentUnlockWithPassword(void);
void* CGPDFDrawingContextCreateWithStream(void);
void* CGPDFDrawingContextDraw(void);
void* CGPDFDrawingContextRelease(void);
void* CGPDFEncodingCreate(void);
void* CGPDFEncodingGetGlyphVector(void);
void* CGPDFEncodingGetGlyphVectorWithFont(void);
void* CGPDFEncodingGetNameForIndex(void);
void* CGPDFEncodingGetUnicodeMaxLength(void);
void* CGPDFEncodingGetUnicodesForIndex(void);
void* CGPDFEncodingRelease(void);
void* CGPDFFontCreate(void);
void* CGPDFFontCreateToUnicodeCMap(void);
void* CGPDFFontCreateWithObject(void);
void* CGPDFFontDescriptorGetDictionary(void);
void* CGPDFFontDescriptorGetFlags(void);
void* CGPDFFontDescriptorRelease(void);
void* CGPDFFontDescriptorRetain(void);
void* CGPDFFontGetAdvances(void);
void* CGPDFFontGetCIDSystemInfo(void);
void* CGPDFFontGetCIDToGlyphMap(void);
void* CGPDFFontGetCMap(void);
void* CGPDFFontGetDescendant(void);
void* CGPDFFontGetDictionary(void);
void* CGPDFFontGetEncoding(void);
void* CGPDFFontGetFont(void);
void* CGPDFFontGetFontBBox(void);
void* CGPDFFontGetFontDescriptor(void);
void* CGPDFFontGetFontMatrix(void);
void* CGPDFFontGetMutator(void);
void* CGPDFFontGetName(void);
void* CGPDFFontGetProcedures(void);
void* CGPDFFontGetROSUnicodeCMap(void);
void* CGPDFFontGetToUnicodeCMap(void);
void* CGPDFFontGetType(void);
void* CGPDFFontIsBase14(void);
void* CGPDFFontIsEmbedded(void);
void* CGPDFFontRelease(void);
void* CGPDFFontRetain(void);
void* CGPDFFormCreate(void);
void* CGPDFFormGetBBox(void);
void* CGPDFFormGetMatrix(void);
void* CGPDFFormGetResources(void);
void* CGPDFFormGetStream(void);
void* CGPDFFormRelease(void);
void* CGPDFFormRetain(void);
void* CGPDFFunctionCreateFunction(void);
void* CGPDFGetBaseEncodingForName(void);
void* CGPDFGetNameForBaseEncoding(void);
void* CGPDFGetNameVectorForBaseEncoding(void);
void* CGPDFGetUnicharGuessForCID(void);
void* CGPDFGetUnicharGuessForGlyphName(void);
void* CGPDFGetUnicharVectorForBaseEncoding(void);
void* CGPDFGetUnicharsForGlyphName(void);
void* CGPDFImageCreateImage(void);
void* CGPDFLayoutCreate(void);
void* CGPDFObjectGetReference(void);
void* CGPDFObjectGetType(void);
void* CGPDFObjectGetValue(void);
void* CGPDFObjectPrint(void);
void* CGPDFOperatorTableCreate(void);
void* CGPDFOperatorTableRelease(void);
void* CGPDFOperatorTableRetain(void);
void* CGPDFOperatorTableSetCallback(void);
void* CGPDFPageAddAnnotation(void);
void* CGPDFPageContainsWideGamutContent(void);
void* CGPDFPageCopyAnnotations(void);
void* CGPDFPageCopyPageLabel(void);
void* CGPDFPageCopyTextString(void);
void* CGPDFPageCopyTextStringWithGlyphs(void);
void* CGPDFPageCopyThumbnail(void);
void* CGPDFPageCreate(void);
void* CGPDFPageCreateThumbnail(void);
void* CGPDFPageCreateWithImage(void);
void* CGPDFPageEnumerateAnnotations(void);
void* CGPDFPageGetAnnotationAtIndex(void);
void* CGPDFPageGetAnnotationCount(void);
void* CGPDFPageGetBoxRect(void);
void* CGPDFPageGetColorSpace(void);
void* CGPDFPageGetContents(void);
void* CGPDFPageGetDictionary(void);
void* CGPDFPageGetDocument(void);
void* CGPDFPageGetDrawingTransform(void);
void* CGPDFPageGetDrawingTransformForRect(void);
void* CGPDFPageGetImages(void);
void* CGPDFPageGetPage(void);
void* CGPDFPageGetPageNumber(void);
void* CGPDFPageGetProperty(void);
void* CGPDFPageGetRotationAngle(void);
void* CGPDFPageGetThumbnail(void);
void* CGPDFPageGetTypeID(void);
void* CGPDFPagePrint(void);
void* CGPDFPageRelease(void);
void* CGPDFPageRemoveAnnotation(void);
void* CGPDFPageRemoveProperty(void);
void* CGPDFPageRetain(void);
void* CGPDFPageSetBoxRect(void);
void* CGPDFPageSetProperty(void);
void* CGPDFPageSetRotationAngle(void);
void* CGPDFPageSortAnnotations(void);
void* CGPDFPageSubstituteAnnotation(void);
void* CGPDFScannerCreate(void);
void* CGPDFScannerGetContentStream(void);
void* CGPDFScannerPopArray(void);
void* CGPDFScannerPopBoolean(void);
void* CGPDFScannerPopDictionary(void);
void* CGPDFScannerPopInteger(void);
void* CGPDFScannerPopName(void);
void* CGPDFScannerPopNumber(void);
void* CGPDFScannerPopObject(void);
void* CGPDFScannerPopStream(void);
void* CGPDFScannerPopString(void);
void* CGPDFScannerRelease(void);
void* CGPDFScannerRetain(void);
void* CGPDFScannerScan(void);
void* CGPDFSourceGetLength(void);
void* CGPDFSourceGetPosition(void);
void* CGPDFSourceGetc(void);
void* CGPDFSourceIsAtEOF(void);
void* CGPDFSourceRead(void);
void* CGPDFSourceRelease(void);
void* CGPDFSourceRetain(void);
void* CGPDFSourceRewind(void);
void* CGPDFSourceSetPosition(void);
void* CGPDFSourceUngetc(void);
void* CGPDFStreamCopyData(void);
void* CGPDFStreamCreate(void);
void* CGPDFStreamCreateDataProvider(void);
void* CGPDFStreamCreateFilterChain(void);
void* CGPDFStreamCreateWithData(void);
void* CGPDFStreamGetAssociation(void);
void* CGPDFStreamGetData(void);
void* CGPDFStreamGetDictionary(void);
void* CGPDFStreamPrint(void);
void* CGPDFStreamPrintContents(void);
void* CGPDFStreamPrintContentsWithIndent(void);
void* CGPDFStreamPrintWithIndent(void);
void* CGPDFStreamRelease(void);
void* CGPDFStreamRetain(void);
void* CGPDFStreamSetAssociation(void);
void* CGPDFStreamSetObjectReference(void);
void* CGPDFStringCopyDate(void);
void* CGPDFStringCopyTextString(void);
void* CGPDFStringGetBytePtr(void);
void* CGPDFStringGetLength(void);
void* CGPDFStringPrint(void);
void* CGPDFStringRelease(void);
void* CGPDFStringRetain(void);
void* CGPDFTagTypeGetName(void);
void* CGPDFTextStringGetBBoxForIndex(void);
void* CGPDFTextStringGetCharacterAtIndex(void);
void* CGPDFTextStringGetColorForIndex(void);
void* CGPDFTextStringGetFontForIndex(void);
void* CGPDFTextStringGetGlyphAtIndex(void);
void* CGPDFTextStringGetLength(void);
void* CGPDFTextStringGetPositionForIndex(void);
void* CGPDFTextStringGetTransformForIndex(void);
void* CGPDFTextStringRelease(void);
void* CGPDFTextStringRetain(void);
void* CGPSContextClose(void);
void* CGPSContextCreate(void);
void* CGPSContextCreateWithFilename(void);
void* CGPSContextCreateWithURL(void);
void* CGPSConverterAbort(void);
void* CGPSConverterConvert(void);
void* CGPSConverterConvertFromURLToURL(void);
void* CGPSConverterCreate(void);
void* CGPSConverterGetTypeID(void);
void* CGPSConverterIsConverting(void);
void* CGPathAddArc(void);
void* CGPathAddArcToPoint(void);
void* CGPathAddCurveToPoint(void);
void* CGPathAddEllipseInRect(void);
void* CGPathAddLineToPoint(void);
void* CGPathAddLines(void);
void* CGPathAddPath(void);
void* CGPathAddQuadCurveToPoint(void);
void* CGPathAddRect(void);
void* CGPathAddRects(void);
void* CGPathAddRegion(void);
void* CGPathAddRelativeArc(void);
void* CGPathAddRoundedRect(void);
void* CGPathAddUnevenCornersRoundedRect(void);
void* CGPathApply(void);
void* CGPathApplyDashedPath(void);
void* CGPathApplyIterator(void);
void* CGPathApplyStrokedDashedPath(void);
void* CGPathApplyWithBlock(void);
void* CGPathCloseSubpath(void);
void* CGPathContainsPoint(void);
void* CGPathCreateByNormalizingGlyphPath(void);
void* CGPathCreateCopy(void);
void* CGPathCreateCopyByDashingPath(void);
void* CGPathCreateCopyByStrokingPath(void);
void* CGPathCreateCopyByTransformingPath(void);
void* CGPathCreateDashedPath(void);
void* CGPathCreateMutable(void);
void* CGPathCreateMutableCopy(void);
void* CGPathCreateMutableCopyByTransformingPath(void);
void* CGPathCreateStrokedPath(void);
void* CGPathCreateWithEllipseInRect(void);
void* CGPathCreateWithLineSegment(void);
void* CGPathCreateWithRect(void);
void* CGPathCreateWithRoundedRect(void);
void* CGPathCreateWithThresholdedImage(void);
void* CGPathCreateWithThresholdedImageDebug(void);
void* CGPathCreateWithUnevenCornersRoundedRect(void);
void* CGPathEqualToPath(void);
void* CGPathGetBoundingBox(void);
void* CGPathGetCurrentPoint(void);
void* CGPathGetGeometricBoundingBox(void);
void* CGPathGetPathBoundingBox(void);
void* CGPathGetTypeID(void);
void* CGPathIsEllipse(void);
void* CGPathIsEllipse2(void);
void* CGPathIsEllipseWithTransform(void);
void* CGPathIsEmpty(void);
void* CGPathIsLine(void);
void* CGPathIsRect(void);
void* CGPathIsRectWithTransform(void);
void* CGPathIsRegion(void);
void* CGPathIsRoundedRect(void);
void* CGPathIsRoundedRectWithTransform(void);
void* CGPathIsUnevenCornersRoundedRectWithTransform(void);
void* CGPathIsValidGlyphPath(void);
void* CGPathMoveToPoint(void);
void* CGPathPrint(void);
void* CGPathRelease(void);
void* CGPathRetain(void);
void* CGPatternCreate(void);
void* CGPatternCreateColoredEmpty(void);
void* CGPatternCreateUncoloredEmpty(void);
void* CGPatternCreateWithImage(void);
void* CGPatternCreateWithImage2(void);
void* CGPatternDrawInContextDelegate(void);
void* CGPatternGetAssociate(void);
void* CGPatternGetBounds(void);
void* CGPatternGetIdentifier(void);
void* CGPatternGetImage(void);
void* CGPatternGetMatrix(void);
void* CGPatternGetShading(void);
void* CGPatternGetStep(void);
void* CGPatternGetTiling(void);
void* CGPatternGetType(void);
void* CGPatternGetTypeID(void);
void* CGPatternIsColored(void);
void* CGPatternIsOpaque(void);
void* CGPatternNotificationCenter(void);
void* CGPatternRelease(void);
void* CGPatternRetain(void);
void* CGPatternSetAssociate(void);
void* CGPointApplyAffineTransform(void);
void* CGPointApplyInverseAffineTransform(void);
void* CGPointCreateDictionaryRepresentation(void);
void* CGPointEqualToPoint(void);
void* CGPointMakeWithDictionaryRepresentation(void);
void* CGPostError(void);
void* CGPostErrorWithArguments(void);
void* CGPreferencesCopyString(void);
void* CGPreferencesGetBoolean(void);
void* CGPreferencesGetCGFloat(void);
void* CGPreferencesGetInteger(void);
void* CGRIPImageCachePrint(void);
void* CGRIPImageCachePurge(void);
void* CGRectApplyAffineTransform(void);
void* CGRectApplyInverseAffineTransform(void);
void* CGRectContainsPoint(void);
void* CGRectContainsRect(void);
void* CGRectCreateDictionaryRepresentation(void);
void* CGRectDivide(void);
void* CGRectEqualToRect(void);
void* CGRectGetHeight(void);
void* CGRectGetMaxX(void);
void* CGRectGetMaxY(void);
void* CGRectGetMidX(void);
void* CGRectGetMidY(void);
void* CGRectGetMinX(void);
void* CGRectGetMinY(void);
void* CGRectGetWidth(void);
void* CGRectInset(void);
void* CGRectIntegral(void);
void* CGRectIntersection(void);
void* CGRectIntersectsRect(void);
void* CGRectIsEmpty(void);
void* CGRectIsInfinite(void);
void* CGRectIsIntegral(void);
void* CGRectIsNull(void);
void* CGRectMakeWithDictionaryRepresentation(void);
void* CGRectOffset(void);
void* CGRectStandardize(void);
void* CGRectUnion(void);
void* CGRegionContainsPoint(void);
void* CGRegionContainsRect(void);
void* CGRegionContainsRegion(void);
void* CGRegionCopyData(void);
void* CGRegionCreateByScalingRegion(void);
void* CGRegionCreateBySimplifyingRegion(void);
void* CGRegionCreateByTransformingRegion(void);
void* CGRegionCreateCopy(void);
void* CGRegionCreateDifferenceWithRegion(void);
void* CGRegionCreateEmptyRegion(void);
void* CGRegionCreateIntersectionWithRect(void);
void* CGRegionCreateIntersectionWithRegion(void);
void* CGRegionCreateUnionWithRect(void);
void* CGRegionCreateUnionWithRegion(void);
void* CGRegionCreateWithBytes(void);
void* CGRegionCreateWithData(void);
void* CGRegionCreateWithInset(void);
void* CGRegionCreateWithOffset(void);
void* CGRegionCreateWithRect(void);
void* CGRegionCreateWithRects(void);
void* CGRegionCreateXORWithRegion(void);
void* CGRegionEnumeratorCreate(void);
void* CGRegionEnumeratorCreateWithDirection(void);
void* CGRegionEnumeratorGetNextRect(void);
void* CGRegionEnumeratorRelease(void);
void* CGRegionEqualToRegion(void);
void* CGRegionForwardEnumeratorGetNextBounds(void);
void* CGRegionForwardEnumeratorGetNextRect(void);
void* CGRegionForwardEnumeratorMake(void);
void* CGRegionGetBoundingBox(void);
void* CGRegionGetDataBytePtr(void);
void* CGRegionGetDataLength(void);
void* CGRegionGetTypeID(void);
void* CGRegionIntersectsRect(void);
void* CGRegionIntersectsRegion(void);
void* CGRegionIsEmpty(void);
void* CGRegionIsRect(void);
void* CGRegionIsValid(void);
void* CGRegionRelease(void);
void* CGRegionRetain(void);
void* CGRenderingStateCreate(void);
void* CGRenderingStateCreateCopy(void);
void* CGRenderingStateGetAllowedFontRenderingStyle(void);
void* CGRenderingStateGetAllowsAcceleration(void);
void* CGRenderingStateGetAllowsAntialiasing(void);
void* CGRenderingStateGetAllowsDithering(void);
void* CGRenderingStateGetAllowsFontAntialiasing(void);
void* CGRenderingStateGetAllowsFontSmoothing(void);
void* CGRenderingStateGetAllowsFontSubpixelPositioning(void);
void* CGRenderingStateGetAllowsFontSubpixelQuantization(void);
void* CGRenderingStateGetBaseCTM(void);
void* CGRenderingStateGetFontRenderingStyle(void);
void* CGRenderingStateGetMaxInterpolationQuality(void);
void* CGRenderingStateGetMinInterpolationQuality(void);
void* CGRenderingStateGetRenderingResolution(void);
void* CGRenderingStateRelease(void);
void* CGRenderingStateReset(void);
void* CGRenderingStateRetain(void);
void* CGRenderingStateSetAllowsAcceleration(void);
void* CGRenderingStateSetAllowsAntialiasing(void);
void* CGRenderingStateSetAllowsDithering(void);
void* CGRenderingStateSetAllowsFontAntialiasing(void);
void* CGRenderingStateSetAllowsFontSmoothing(void);
void* CGRenderingStateSetAllowsFontSubpixelPositioning(void);
void* CGRenderingStateSetAllowsFontSubpixelQuantization(void);
void* CGRenderingStateSetBaseCTM(void);
void* CGRenderingStateSetMaxInterpolationQuality(void);
void* CGRenderingStateSetMinInterpolationQuality(void);
void* CGRenderingStateSetRenderingResolution(void);
void* CGRenderingStateSynchronize(void);
void* CGSBoundingShapeAdd(void);
void* CGSBoundingShapeAddRect(void);
void* CGSBoundingShapeAddRegion(void);
void* CGSBoundingShapeAddRegionWithScale(void);
void* CGSBoundingShapeCreate(void);
void* CGSBoundingShapeGetBounds(void);
void* CGSBoundingShapeGetRegion(void);
void* CGSBoundingShapeRelease(void);
void* CGSBoundingShapeReset(void);
void* CGSBoundsEqualToBounds(void);
void* CGSBoundsIntersection(void);
void* CGSBoundsUnion(void);
void* CGSColorMaskCopyARGB8888(void);
void* CGSConvertBGRA8888toRGBA8888(void);
void* CGSConvertBitsToMask(void);
void* CGSConvertRGB555toXRGB8888(void);
void* CGSConvertW8toRGBA8888(void);
void* CGSConvertXRGB8888toARGB8888(void);
void* CGSCopyRegion(void);
void* CGSCreateRegionFromData(void);
void* CGSDiffRegion(void);
void* CGSGetQDRgnLength(void);
void* CGSGetRegionBounds(void);
void* CGSGetRegionData(void);
void* CGSGetRegionRectCount(void);
void* CGSInsetRegion(void);
void* CGSIntersectRegion(void);
void* CGSIntersectRegionWithRect(void);
void* CGSNewEmptyRegion(void);
void* CGSNewRegionWithData(void);
void* CGSNewRegionWithQDRgn(void);
void* CGSNewRegionWithRect(void);
void* CGSNewRegionWithRectList(void);
void* CGSNextPoint(void);
void* CGSNextRect(void);
void* CGSOffsetRegion(void);
void* CGSPointInRegion(void);
void* CGSQuadrangleToRegion(void);
void* CGSRectInRegion(void);
void* CGSRegionCreateWithBoundingShape(void);
void* CGSRegionEnumerator(void);
void* CGSRegionEnumeratorWithDirection(void);
void* CGSRegionFromBitmap(void);
void* CGSRegionGetShape(void);
void* CGSRegionInRegion(void);
void* CGSRegionIntersectsRect(void);
void* CGSRegionIntersectsRegion(void);
void* CGSRegionIsEmpty(void);
void* CGSRegionIsRectangular(void);
void* CGSRegionMergeFlushAndMoveRegions(void);
void* CGSRegionPathEnumerator(void);
void* CGSRegionRelease(void);
void* CGSRegionRetain(void);
void* CGSRegionToQDRgn(void);
void* CGSRegionsEqual(void);
void* CGSReleaseRegion(void);
void* CGSReleaseRegionEnumerator(void);
void* CGSSetShouldLogErrors(void);
void* CGSSetShouldLogMessages(void);
void* CGSTransformRegion(void);
void* CGSUnionRegion(void);
void* CGSUnionRegionWithRect(void);
void* CGSXorRegion(void);
void* CGShadingCreateAxial(void);
void* CGShadingCreateConic(void);
void* CGShadingCreateRadial(void);
void* CGShadingCreateWithCoreImage(void);
void* CGShadingDelegateDrawShading(void);
void* CGShadingDrawInContextDelegate(void);
void* CGShadingGetAssociate(void);
void* CGShadingGetBackground(void);
void* CGShadingGetBounds(void);
void* CGShadingGetColorSpace(void);
void* CGShadingGetDescriptor(void);
void* CGShadingGetIdentifier(void);
void* CGShadingGetType(void);
void* CGShadingGetTypeID(void);
void* CGShadingRelease(void);
void* CGShadingRetain(void);
void* CGShadingSetAssociate(void);
void* CGSizeApplyAffineTransform(void);
void* CGSizeCreateDictionaryRepresentation(void);
void* CGSizeEqualToSize(void);
void* CGSizeMakeWithDictionaryRepresentation(void);
void* CGSoftMaskCreate(void);
void* CGSoftMaskDelegateDrawSoftMask(void);
void* CGSoftMaskEqual(void);
void* CGSoftMaskGetBackground(void);
void* CGSoftMaskGetBounds(void);
void* CGSoftMaskGetIdentifier(void);
void* CGSoftMaskGetMatrix(void);
void* CGSoftMaskGetTransfer(void);
void* CGSoftMaskGetTypeID(void);
void* CGSoftMaskRelease(void);
void* CGSoftMaskRetain(void);
void* CGStyleCreate(void);
void* CGStyleCreateFocusRing(void);
void* CGStyleCreateFocusRingWithColor(void);
void* CGStyleCreateShadow(void);
void* CGStyleCreateShadow2(void);
void* CGStyleCreateShadowWithColor(void);
void* CGStyleEqualToStyle(void);
void* CGStyleFilterContextDelegateCreate(void);
void* CGStyleGetColor(void);
void* CGStyleGetData(void);
void* CGStyleGetDrawBoundingBox(void);
void* CGStyleGetDrawOrdering(void);
void* CGStyleGetIdentifier(void);
void* CGStyleGetType(void);
void* CGStyleGetTypeID(void);
void* CGStyleRelease(void);
void* CGStyleRetain(void);
void* CGStyleShouldUseCorrectShadowOffsets(void);
void* CGTextClippingCreatePath(void);
void* CGTriangleMeshAddTriangle(void);
void* CGTriangleMeshAddTriangleWithRelativePoint(void);
void* CGTriangleMeshAddTriangleWithTrianglePoints(void);
void* CGTriangleMeshCreate(void);
void* CGTriangleMeshGetColorSpace(void);
void* CGTriangleMeshGetCount(void);
void* CGTriangleMeshGetNumberOfComponents(void);
void* CGTriangleMeshGetTriangleAtIndex(void);
void* CGTriangleMeshPrint(void);
void* CGTriangleMeshRelease(void);
void* CGTriangleMeshRetain(void);
void* CGTypeCreateInstance(void);
void* CGUpdateConvolveKernelBlue(void);
void* CGUpdateConvolveKernelGreen(void);
void* CGUpdateConvolveKernelMonochrome(void);
void* CGUpdateConvolveKernelRed(void);
void* __CGTypeRegister(void);
void* __CGWindowContextDelegateCreate(void);
void* aa_clipping(void);
void* aa_closepath(void);
void* aa_create(void);
void* aa_cubeto(void);
void* aa_destroy(void);
void* aa_flatness(void);
void* aa_geometry(void);
void* aa_line_render(void);
void* aa_line_render_shape(void);
void* aa_lineto(void);
void* aa_moveto(void);
void* aa_newpath(void);
void* aa_quadto(void);
void* aa_rectat(void);
void* aa_render(void);
void* aa_render_shape(void);
void* aal_clipping(void);
void* aal_create(void);
void* aal_destroy(void);
void* aal_flatness(void);
void* aal_geometry(void);
void* aal_newpath(void);
void* decode_create(void);
void* decode_data(void);
void* decode_destroy(void);
void* path_iterator_aaline_create(void);
void* path_iterator_add_curve_to_point(void);
void* path_iterator_add_line_to_point(void);
void* path_iterator_add_quad_curve_to_point(void);
void* path_iterator_begin(void);
void* path_iterator_call(void);
void* path_iterator_close_subpath(void);
void* path_iterator_create(void);
void* path_iterator_dasher_create(void);
void* path_iterator_end(void);
void* path_iterator_move_to_point(void);
void* path_iterator_release(void);
void* path_iterator_stroker_create(void);
void* rect_to_bounds(void);
void* region_create_with_shape(void);
void* shape_alloc_bounds(void);
void* shape_alloc_data(void);
void* shape_alloc_qdrgn(void);
void* shape_bounds(void);
void* shape_combine(void);
void* shape_contains_bounds(void);
void* shape_contains_point(void);
void* shape_copy(void);
void* shape_count(void);
void* shape_difference(void);
void* shape_empty(void);
void* shape_enclose_with_bounds(void);
void* shape_enum_alloc(void);
void* shape_enum_binary_clean_up(void);
void* shape_enum_binary_init(void);
void* shape_enum_binary_next(void);
void* shape_enum_clip_alloc(void);
void* shape_enum_clip_next(void);
void* shape_enum_clip_scan(void);
void* shape_enum_free(void);
void* shape_enum_next(void);
void* shape_forward_enum(void);
void* shape_forward_enum_next(void);
void* shape_free(void);
void* shape_inset(void);
void* shape_intersect(void);
void* shape_intersect_with_bounds(void);
void* shape_is_empty(void);
void* shape_is_rectangular(void);
void* shape_length(void);
void* shape_offset(void);
void* shape_qdrgn_alloc(void);
void* shape_qdrgn_free(void);
void* shape_union(void);
void* shape_xor(void);

#endif
